
/*
 * Copyright (c) 2020 NetFoundry. All rights reserved.
 */

plugins {
    alias(libs.plugins.android.app)
    alias(libs.plugins.kotlin.android)
}

version = parent.version

def vc = versionCode

android {
    namespace = "org.openziti.mobile"
    signingConfigs {
        release {
            keyAlias 'ziti1'
            keyPassword System.getenv('RELEASE_KEYSTORE_PASSWORD')
            storeFile file(System.getenv('RELEASE_KEYSTORE') ?: "not found")
            storePassword System.getenv('RELEASE_KEYSTORE_PASSWORD')
        }
    }
    compileSdk = 33
    ndkVersion "22.1.7171670"

    defaultConfig {
        applicationId "org.openziti.mobile"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode vc
        versionName "${project.version}"

        buildConfigField "String", "GIT_COMMIT", "\"${gitHash}\""
        buildConfigField "String", "GIT_BRANCH", "\"${gitBranch}\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
}

dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")

    implementation(libs.ziti.android) {
        transitive = true
        artifact {
            type = "aar"
        }
        exclude(module: "jna")
    }
    implementation(libs.jna) {
        artifact {
            type = "aar"
        }
    }

    implementation(libs.slf4j.android)

    implementation(libs.kotlin)
    implementation(libs.coroutines.android)


    implementation(libs.material)
    implementation(libs.constraintlayout)

    implementation(libs.zxing.android.embedded)

    implementation(libs.pcap4j.core){
        transitive = false
        exclude(group: "net.java.dev.jna", module: "jna")
    }
    implementation(libs.pcap4j.packetfactory.static) {
        exclude(group: "net.java.dev.jna", module: "jna")
    }

    implementation(libs.lifecycle.extensions)
    implementation(libs.appcompat)
    implementation(libs.lifecycle.livedata.ktx)
    implementation(libs.lifecycle.viewmodel.ktx)

    testImplementation(libs.hamcrest.core)
    testImplementation(libs.junit)
    androidTestImplementation(libs.test.runner)
    androidTestImplementation(libs.test.rules)
    androidTestImplementation(libs.espresso.core)
}
